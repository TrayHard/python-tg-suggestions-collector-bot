import datetime
import os.path

from dotenv import load_dotenv
load_dotenv()
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove

from spreadsheets import spreadsheet_manager
from keyboard import kb_again, kb_again_text

class FSM(StatesGroup):
  waiting_for_answer = State()

def init_bot():
  storage = MemoryStorage()
  bot = Bot(token=os.getenv('TG_BOT_TOKEN'))
  dp = Dispatcher(bot=bot, storage=storage)

  @dp.message_handler(commands=['start'])
  @dp.message_handler(lambda message: message.text and message.text == kb_again_text)
  async def on_start(message: types.Message):
    await message.reply(f"–°–∞–ª—é—Ç –¢–æ–≤–∞—Ä–∏—â! –í–∏–∂—É —Ç—ã —É–∑–Ω–∞–ª –Ω–µ–≤—ã–¥—É–º–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –æ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –º–æ–∂–µ—à—å –º–æ–ª—á–∞—Ç—å! –ú—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –Ω–µ–π –ª—é–¥—è–º, –µ—Å–ª–∏ –æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=ReplyKeyboardRemove())
    await FSM.waiting_for_answer.set()

  @dp.message_handler(state=FSM.waiting_for_answer)
  async def on_getting_answer(message: types.Message, state: FSMContext):
    username = 'https://t.me/' + message.from_user.username
    content = message.text
    time_now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

    spreadsheet_manager.append_row([username, content, time_now])
    await message.reply(f"–°–ø–∞—Å–∏–±–æ! –ù–∞—à–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–∞ –ù–∏–±–∏—Ä—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø—Ä–∏—Å–ª–∞–ª üåñ", reply_markup=kb_again)
    await state.finish()

  executor.start_polling(dp, skip_updates=True)